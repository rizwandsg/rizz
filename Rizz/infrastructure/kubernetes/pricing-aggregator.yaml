# Kubernetes Deployment Configuration - Pricing Aggregator

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pricing-aggregator
  namespace: riz-travel
  labels:
    app: pricing-aggregator
    tier: backend
    version: v1
spec:
  replicas: 4
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: pricing-aggregator
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: pricing-aggregator
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8007"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pricing-aggregator-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: pricing-aggregator
        image: gcr.io/riz-travel/pricing-aggregator:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8007
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8007"
        - name: CASSANDRA_CONTACT_POINTS
          valueFrom:
            configMapKeyRef:
              name: cassandra-config
              key: contact-points
        - name: CASSANDRA_KEYSPACE
          value: "pricing"
        - name: CASSANDRA_REPLICATION_FACTOR
          value: "3"
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: url
        - name: REDIS_PRICE_CACHE_TTL
          value: "900"  # 15 minutes
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: brokers
        - name: KAFKA_TOPIC_PRICE_UPDATES
          value: "price-updates"
        - name: KAFKA_CONSUMER_GROUP
          value: "pricing-aggregator"
        - name: SKYSCANNER_API_KEY
          valueFrom:
            secretKeyRef:
              name: provider-api-keys
              key: skyscanner
        - name: BOOKING_COM_API_KEY
          valueFrom:
            secretKeyRef:
              name: provider-api-keys
              key: booking-com
        - name: AMADEUS_API_KEY
          valueFrom:
            secretKeyRef:
              name: provider-api-keys
              key: amadeus
        - name: RATE_LIMIT_REQUESTS_PER_MINUTE
          value: "100"
        - name: CIRCUIT_BREAKER_THRESHOLD
          value: "5"
        - name: CIRCUIT_BREAKER_TIMEOUT_MS
          value: "60000"
        - name: PRICE_REFRESH_INTERVAL_MINUTES
          value: "30"
        - name: LOG_LEVEL
          value: "info"
        - name: JAEGER_AGENT_HOST
          value: "jaeger-agent.monitoring.svc.cluster.local"
        - name: JAEGER_AGENT_PORT
          value: "6831"
        resources:
          requests:
            cpu: 300m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 20"]
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: pricing-aggregator-config
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - pricing-aggregator
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: pricing-aggregator
  namespace: riz-travel
  labels:
    app: pricing-aggregator
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: pricing-aggregator

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pricing-aggregator-hpa
  namespace: riz-travel
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pricing-aggregator
  minReplicas: 4
  maxReplicas: 25
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: external_api_request_duration_seconds
      target:
        type: AverageValue
        averageValue: "3"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 5
        periodSeconds: 30
      selectPolicy: Max

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pricing-aggregator-sa
  namespace: riz-travel
  annotations:
    iam.gke.io/gcp-service-account: pricing-aggregator@riz-travel.iam.gserviceaccount.com

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pricing-aggregator-pdb
  namespace: riz-travel
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: pricing-aggregator

---
# Background worker for periodic price refreshes
apiVersion: batch/v1
kind: CronJob
metadata:
  name: price-refresh-worker
  namespace: riz-travel
spec:
  schedule: "*/30 * * * *"  # Every 30 minutes
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 1200  # 20 minutes
      template:
        metadata:
          labels:
            app: price-refresh-worker
        spec:
          serviceAccountName: pricing-aggregator-sa
          restartPolicy: OnFailure
          containers:
          - name: worker
            image: gcr.io/riz-travel/pricing-aggregator:latest
            command: ["node", "dist/workers/price-refresh.js"]
            env:
            - name: NODE_ENV
              value: "production"
            - name: CASSANDRA_CONTACT_POINTS
              valueFrom:
                configMapKeyRef:
                  name: cassandra-config
                  key: contact-points
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: redis-config
                  key: url
            - name: KAFKA_BROKERS
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: brokers
            - name: BATCH_SIZE
              value: "100"
            - name: PARALLEL_WORKERS
              value: "10"
            resources:
              requests:
                cpu: 500m
                memory: 1Gi
              limits:
                cpu: 2000m
                memory: 2Gi
