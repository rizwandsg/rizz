╔══════════════════════════════════════════════════════════════════════════╗
║                                                                          ║
║  💰 RECEIVED PAYMENTS TRACKING - IMPLEMENTATION GUIDE 💰                ║
║                                                                          ║
╚══════════════════════════════════════════════════════════════════════════╝

✅ NEW FEATURE: Track Client Payments for Projects!

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📋 QUICK SETUP (3 STEPS)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Step 1: RUN DATABASE MIGRATION
────────────────────────────────────────────────────────────────────────
1. Open Supabase Dashboard: https://supabase.com/dashboard
2. Select your project
3. Click "SQL Editor" in left sidebar
4. Click "New Query"
5. Copy ENTIRE content from: migrations/create_payments_table.sql
6. Paste into SQL Editor
7. Click "RUN" button
8. Wait for success message
────────────────────────────────────────────────────────────────────────

Step 2: RESTART APP
────────────────────────────────────────────────────────────────────────
npx expo start --clear
────────────────────────────────────────────────────────────────────────

Step 3: START RECORDING PAYMENTS
────────────────────────────────────────────────────────────────────────
See "How to Use" section below
────────────────────────────────────────────────────────────────────────

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 WHAT'S NEW?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ NEW API: paymentsApi.ts
   - Track all payments received from clients
   - Full CRUD operations (Create, Read, Update, Delete)
   - Payment summary calculations

✅ NEW SCREEN: AddPayment.tsx
   - Record new payments
   - Edit existing payments
   - Beautiful, user-friendly interface

✅ NEW DATABASE TABLE: payments
   - Stores all payment records
   - Linked to projects
   - Secure with Row Level Security (RLS)

✅ NEW FEATURES:
   - Multiple payment types (Advance, Milestone, Final, etc.)
   - Multiple payment modes (Cash, UPI, Bank Transfer, etc.)
   - Reference number tracking
   - Payment notes
   - Automatic summaries

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💰 PAYMENT TYPES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 💚 Advance Payment (Green)
   - Initial payment before work starts
   - Usually 20-40% of project cost
   - Icon: cash-fast

2. 🔵 Milestone Payment (Blue)
   - Payment after completing a phase
   - Linked to specific deliverables
   - Icon: flag-checkered

3. 🟠 Final Payment (Orange)
   - Last payment after project completion
   - Settles the remaining balance
   - Icon: cash-check

4. 🟣 Partial Payment (Purple)
   - Any intermediate payment
   - Not tied to specific milestone
   - Icon: cash-multiple

5. ⚫ Other (Gray)
   - For any other type of payment
   - Icon: cash

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💳 PAYMENT MODES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 💵 Cash (Green)
   - Physical currency
   - Icon: cash

2. 📱 UPI (Blue)
   - Google Pay, PhonePe, Paytm, etc.
   - Icon: qrcode-scan

3. 🏦 Bank Transfer (Orange)
   - NEFT, RTGS, IMPS
   - Icon: bank-transfer

4. 📝 Check (Purple)
   - Bank check/cheque
   - Icon: checkbook

5. 💳 Card (Pink)
   - Credit/Debit card payment
   - Icon: credit-card

6. 🌐 Online (Cyan)
   - Online payment gateways
   - Icon: web

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 PAYMENT SUMMARY
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

For each project, you can see:

┌──────────────────────────────────────────────────────────────┐
│ Total Project Cost:        ₹5,00,000                        │
│ Total Received:            ₹3,00,000  (60%)                 │
│ Remaining Amount:          ₹2,00,000  (40%)                 │
│ ─────────────────────────────────────────────────────────── │
│ Total Expenses:            ₹2,50,000                        │
│ Profit/Loss:               +₹50,000   (GREEN = Profit)      │
│ Payment Count:             3 payments                       │
│ Last Payment Date:         15 Jan 2025                      │
└──────────────────────────────────────────────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 HOW TO USE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

RECORD A NEW PAYMENT
┌──────────────────────────────────────────────────────────────────────┐
│ Step 1: Open Your Project                                           │
│ Step 2: Click "Record Payment" button (you'll add this)             │
│ Step 3: Fill in the payment details:                                │
│         - Amount Received *                                          │
│         - Payment Date *                                             │
│         - Received From (auto-filled with client name)               │
│         - Payment Type (Advance, Milestone, Final, etc.)             │
│         - Payment Mode (Cash, UPI, Bank Transfer, etc.)              │
│         - Reference Number (Transaction ID, Check number)            │
│         - Notes (Optional details)                                   │
│ Step 4: Click "Record Payment"                                      │
│ Step 5: Done! Payment saved ✅                                      │
└──────────────────────────────────────────────────────────────────────┘

VIEW PAYMENT HISTORY
┌──────────────────────────────────────────────────────────────────────┐
│ • Open project details                                               │
│ • Scroll to "Payments" section (you'll add this)                     │
│ • See list of all payments received                                  │
│ • Each payment shows:                                                │
│   - Amount                                                           │
│   - Date                                                             │
│   - Payment type (with colored badge)                                │
│   - Payment mode (with icon)                                         │
│   - Reference number                                                 │
└──────────────────────────────────────────────────────────────────────┘

EDIT A PAYMENT
┌──────────────────────────────────────────────────────────────────────┐
│ • Open payment from list                                             │
│ • Click edit button (✏️)                                            │
│ • Update any field                                                   │
│ • Save changes                                                       │
└──────────────────────────────────────────────────────────────────────┘

DELETE A PAYMENT
┌──────────────────────────────────────────────────────────────────────┐
│ • Open payment from list                                             │
│ • Click delete button (🗑️)                                          │
│ • Confirm deletion                                                   │
└──────────────────────────────────────────────────────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 EXAMPLE USE CASES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Use Case 1: Advance Payment
┌───────────────────────────────────────────────────────────────┐
│ Project: "Residential Interior - Sharma House"               │
│ Total Cost: ₹10,00,000                                       │
│ ───────────────────────────────────────────────────────────  │
│ Payment #1:                                                   │
│ Amount: ₹3,00,000 (30% advance)                             │
│ Date: 1 Jan 2025                                             │
│ Type: Advance Payment                                         │
│ Mode: Bank Transfer                                           │
│ Reference: TXN123456789                                       │
│ From: Mr. Sharma                                              │
│ Notes: "30% advance as per agreement"                         │
└───────────────────────────────────────────────────────────────┘

Use Case 2: Milestone Payment
┌───────────────────────────────────────────────────────────────┐
│ Payment #2:                                                   │
│ Amount: ₹4,00,000 (40% on completion of carpentry)          │
│ Date: 15 Jan 2025                                            │
│ Type: Milestone Payment                                       │
│ Mode: UPI                                                     │
│ Reference: PhonePe-987654321                                  │
│ From: Mr. Sharma                                              │
│ Notes: "Carpentry work completed and approved"                │
└───────────────────────────────────────────────────────────────┘

Use Case 3: Final Payment
┌───────────────────────────────────────────────────────────────┐
│ Payment #3:                                                   │
│ Amount: ₹3,00,000 (30% final payment)                       │
│ Date: 31 Jan 2025                                            │
│ Type: Final Payment                                           │
│ Mode: Check                                                   │
│ Reference: Check #456789                                      │
│ From: Mr. Sharma                                              │
│ Notes: "Project completed. Final settlement."                 │
└───────────────────────────────────────────────────────────────┘

Result:
┌───────────────────────────────────────────────────────────────┐
│ Total Received: ₹10,00,000 ✅ (100% collected!)             │
│ Project fully paid!                                           │
└───────────────────────────────────────────────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📁 FILES CREATED
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ api/paymentsApi.ts (188 lines)
   - Complete API for payment management
   - CRUD operations
   - Payment summary calculations
   - Payment types and modes constants

✅ app/AddPayment.tsx (682 lines)
   - Beautiful UI for recording payments
   - Edit existing payments
   - Form validation
   - Auto-fills client name from project

✅ migrations/create_payments_table.sql (283 lines)
   - Creates payments table
   - Indexes for performance
   - Views for reporting
   - Row Level Security policies
   - Comprehensive verification

✅ services/databaseService.ts (UPDATED)
   - Added PAYMENTS table constant
   - Added updateData method

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🗄️ DATABASE SCHEMA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Table: payments
┌─────────────────────┬──────────────────┬──────────┬──────────────┐
│ Column              │ Type             │ Nullable │ Default      │
├─────────────────────┼──────────────────┼──────────┼──────────────┤
│ id                  │ UUID             │ NO       │ uuid_gen_v4()│
│ project_id          │ UUID             │ NO       │              │
│ user_id             │ UUID             │ NO       │              │
│ amount              │ NUMERIC          │ NO       │              │
│ payment_date        │ DATE             │ NO       │              │
│ payment_type        │ VARCHAR(20)      │ NO       │ 'Other'      │
│ payment_mode        │ VARCHAR(50)      │ NO       │ 'Cash'       │
│ reference_number    │ VARCHAR(100)     │ YES      │              │
│ notes               │ TEXT             │ YES      │              │
│ received_from       │ VARCHAR(255)     │ YES      │              │
│ created_at          │ TIMESTAMPTZ      │ YES      │ now()        │
│ updated_at          │ TIMESTAMPTZ      │ YES      │ now()        │
└─────────────────────┴──────────────────┴──────────┴──────────────┘

Indexes:
- idx_payments_project_id (for fast project queries)
- idx_payments_user_id (for user filtering)
- idx_payments_payment_date (for date sorting)
- idx_payments_payment_type (for payment type filtering)

Views Created:
- project_payment_summary (aggregate payments by project)
- payments_with_project (payments with project details)

Security:
- Row Level Security ENABLED
- Users can only access their own payments
- Policies for SELECT, INSERT, UPDATE, DELETE

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔧 NEXT STEPS TO INTEGRATE WITH PROJECT DETAILS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

To add payment tracking to your ProjectDetails screen:

1. Import the payments API:
   ┌────────────────────────────────────────────────────────┐
   │ import { getPaymentsByProject, getPaymentSummary,     │
   │          Payment, PaymentSummary } from               │
   │          "../api/paymentsApi";                        │
   └────────────────────────────────────────────────────────┘

2. Add state variables:
   ┌────────────────────────────────────────────────────────┐
   │ const [payments, setPayments] = useState<Payment[]>([]│
   │ );                                                     │
   │ const [paymentSummary, setPaymentSummary] =           │
   │        useState<PaymentSummary | null>(null);         │
   └────────────────────────────────────────────────────────┘

3. Load payments in loadProjectData:
   ┌────────────────────────────────────────────────────────┐
   │ const paymentsData = await                             │
   │     getPaymentsByProject(id.toString());              │
   │ setPayments(paymentsData);                            │
   │                                                        │
   │ const summary = await getPaymentSummary(               │
   │     id.toString(),                                     │
   │     project?.total_project_cost || 0,                  │
   │     totalExpenses                                      │
   │ );                                                     │
   │ setPaymentSummary(summary);                           │
   └────────────────────────────────────────────────────────┘

4. Add "Record Payment" button:
   ┌────────────────────────────────────────────────────────┐
   │ <TouchableOpacity                                      │
   │   style={styles.recordPaymentButton}                   │
   │   onPress={() => router.push({                         │
   │     pathname: "/AddPayment",                           │
   │     params: { projectId: id }                          │
   │   })}                                                  │
   │ >                                                      │
   │   <MaterialCommunityIcons name="cash-plus"             │
   │                           size={20} color="#fff" />    │
   │   <Text style={styles.buttonText}>                    │
   │     Record Payment                                     │
   │   </Text>                                              │
   │ </TouchableOpacity>                                   │
   └────────────────────────────────────────────────────────┘

5. Display payment summary:
   ┌────────────────────────────────────────────────────────┐
   │ {paymentSummary && (                                   │
   │   <View style={styles.paymentSummaryCard}>             │
   │     <Text style={styles.cardTitle}>                   │
   │       Payment Summary                                  │
   │     </Text>                                            │
   │     <View style={styles.summaryRow}>                   │
   │       <Text>Total Received:</Text>                     │
   │       <Text>{formatCurrency(                           │
   │         paymentSummary.total_received)}               │
   │       </Text>                                          │
   │     </View>                                            │
   │     <View style={styles.summaryRow}>                   │
   │       <Text>Remaining:</Text>                          │
   │       <Text>{formatCurrency(                           │
   │         paymentSummary.remaining_amount)}             │
   │       </Text>                                          │
   │     </View>                                            │
   │     <View style={styles.summaryRow}>                   │
   │       <Text>Profit/Loss:</Text>                        │
   │       <Text style={{                                   │
   │         color: paymentSummary.profit_loss >= 0         │
   │                ? '#4CAF50' : '#F44336'                 │
   │       }}>                                              │
   │         {formatCurrency(paymentSummary.profit_loss)}   │
   │       </Text>                                          │
   │     </View>                                            │
   │   </View>                                              │
   │ )}                                                     │
   └────────────────────────────────────────────────────────┘

6. Display payment list:
   ┌────────────────────────────────────────────────────────┐
   │ <View style={styles.paymentsSection}>                  │
   │   <Text style={styles.sectionTitle}>                  │
   │     Payment History ({payments.length})                │
   │   </Text>                                              │
   │   {payments.map((payment) => (                         │
   │     <TouchableOpacity                                  │
   │       key={payment.id}                                 │
   │       style={styles.paymentCard}                       │
   │       onPress={() => router.push({                     │
   │         pathname: "/AddPayment",                       │
   │         params: {                                      │
   │           id: payment.id,                              │
   │           projectId: id                                │
   │         }                                              │
   │       })}                                              │
   │     >                                                  │
   │       <View style={styles.paymentInfo}>                │
   │         <Text style={styles.paymentAmount}>            │
   │           {formatCurrency(payment.amount)}             │
   │         </Text>                                        │
   │         <Text style={styles.paymentDate}>              │
   │           {new Date(payment.payment_date)              │
   │             .toLocaleDateString()}                     │
   │         </Text>                                        │
   │       </View>                                          │
   │       <View style={styles.paymentBadge}>               │
   │         <Text>{payment.payment_type}</Text>            │
   │       </View>                                          │
   │     </TouchableOpacity>                                │
   │   ))}                                                  │
   │ </View>                                                │
   └────────────────────────────────────────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ BENEFITS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ Track all client payments in one place
✅ Know exactly how much has been received
✅ Calculate remaining balance automatically
✅ See profit/loss instantly
✅ Professional payment records
✅ Multiple payment types and modes
✅ Reference number tracking for bank reconciliation
✅ Payment history with dates
✅ Easy editing and deletion
✅ Secure with Row Level Security

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎉 YOU'RE ALL SET!
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Run the database migration: migrations/create_payments_table.sql
2. Restart your app: npx expo start --clear
3. Integrate the code snippets above into ProjectDetails.tsx
4. Start recording payments! 💰

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Need help? Check the files:
- api/paymentsApi.ts - API documentation
- app/AddPayment.tsx - UI reference
- migrations/create_payments_table.sql - Database structure

🚀 Happy tracking! 💰
